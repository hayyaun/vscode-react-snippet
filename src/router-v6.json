{
	"import React Router <BrowserRouter>, <Routes>, <Route>": {
		"prefix": ["imrrr"],
		"body": ["import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'"],
		"description": "import React Router `<BrowserRouter>, <Routes>, <Route>`\n"
	},
	"import React Router <BrowserRouter>": {
		"prefix": ["imbr"],
		"body": [
			"import { BrowserRouter as Router } from 'react-router-dom'",
			"${0:<Router>\n\t<App />\n</Router>}"
		],
		"description": "import React Router `<BrowserRouter>`\n"
	},
	"import React Router <HashRouter>": {
		"prefix": ["imhr"],
		"body": [
			"import { HashRouter as Router } from 'react-router-dom'",
			"${0:<Router>\n\t<App />\n</Router>}"
		],
		"description": "import React Router `<HashRouter>`\n"
	},
	"import React Router <MemoryRouter>": {
		"prefix": ["immr"],
		"body": ["import { MemoryRouter as Router } from 'react-router-dom'", ""],
		"description": "import React Router `<MemoryRouter>`\n"
	},
	"import React Router <NativeRouter>": {
		"prefix": ["imnr"],
		"body": ["import { NativeRouter as Router } from 'react-router-dom'", ""],
		"description": "import React Router `<NativeRouter>`\n"
	},
	"import React Router <Routes>, <Route>": {
		"prefix": ["imrr"],
		"body": [
			"import { Routes, Route } from 'react-router-dom'",
			"${0:<Routes basename=\"/\">\n\t<Route path={componentConst.route\\} element={<Component />\\} />\n</Routes>}"
		],
		"description": "import React Router `<Routes>, <Route>`\n`<Routes>` instead of `<Switch>`\n"
	},
	"import React Router <Link>": {
		"prefix": ["imrl"],
		"body": ["import { Link } from 'react-router-dom'", "${0:<Link to={path\\}>{name\\}</Link>}"],
		"description": "import React Router `<Link>`\n"
	},
	"import React Router <NavLink>": {
		"prefix": ["imrnl"],
		"body": [
			"import { NavLink } from 'react-router-dom'",
			"${0:<NavLink to={path\\} end>{name\\}</NavLink>}"
		],
		"description": "import React Router `<NavLink>`\n"
	},
	"import React Router <Navigate>": {
		"prefix": ["imrn"],
		"body": [
			"import { Navigate } from 'react-router-dom'",
			"${0:{condition && <Navigate to={path\\} replace={true\\} />\\}}"
		],
		"description": "import React Router `<Navigate>`\nA `<Navigate>` element changes the current location when it is rendered.\n`<Navigate>` instead of `<Redirect>`\n"
	},
	"import React Router <Outlet>": {
		"prefix": ["imro"],
		"body": ["import { Outlet } from 'react-router-dom'", "${0:<Outlet />}"],
		"description": "import React Router <Outlet>\nAn `<Outlet>` should be used in parent route elements to render their child route elements. \n"
	},
	"import React Router useLocation": {
		"prefix": ["imrul"],
		"body": [
			"import { useLocation } from 'react-router-dom'",
			"${0:let location = useLocation()\nuseEffect(() => {\n\thandleNavActionStyle(location)\n\\}, [location])}"
		],
		"description": "import React Router `useLocation` hook. \nThis hook returns the current `location` object. This can be useful if you'd like to perform some side effect whenever the current location changes."
	},
	"import React Router useNavigate": {
		"prefix": ["imrun"],
		"body": [
			"import { useNavigate } from 'react-router-dom'",
			"${0:let navigate = useNavigate()\nnavigate(path, { replace: true \\})}"
		],
		"description": "import React Router `useNavigate` hook. \n `useNavigate` hook instead of `useHistory`\n"
	},
	"import React Router useParams": {
		"prefix": ["imrup"],
		"body": ["import { useParams } from 'react-router-dom'", "${0:let { param \\} = useParams()}"],
		"description": "import React Router `useParams` hook. \n"
	},
	"import React Router usePrompt": {
		"prefix": ["imrupr"],
		"body": [
			"import { usePrompt } from 'react-router-dom'",
			"${0:usePrompt('Are you sure you want to leave?', formData != null)}"
		],
		"description": "import React Router `usePrompt` hook. \n"
	},
	"import React Router useRoutes": {
		"prefix": ["imrur"],
		"body": ["import { useRoutes } from 'react-router-dom'"],
		"description": "import React Router `useRoutes` hook. \n"
	},
	"import React Router useSearchParams": {
		"prefix": ["imrusp"],
		"body": [
			"import { useSearchParams } from 'react-router-dom'",
			"${0:let [searchParams, setSearchParams] = useSearchParams()\n function handleSubmit(event) {\n \tevent.preventDefault()\n \tlet params = serializeFormQuery(event.target)\n \tsetSearchParams(params)\n \\}}"
		],
		"description": "import React Router `useSearchParams` hook.\n"
	},
	"React Router <Link>": {
		"prefix": ["rl", "link"],
		"body": ["<Link to={${1:path}}>{${2:name}}</Link>"],
		"description": "React Router `<Link>`\n"
	},
	"React Router <NavLink>": {
		"prefix": ["rnl", "nl"],
		"body": ["<NavLink to={${1:path}} end>{${2:name}}</NavLink>"],
		"description": "React Router `<NavLink>`\n"
	},
	"React Router <Route>": {
		"prefix": ["rr", "route"],
		"body": ["<Route path={${1:componentConst.route}\\} element={<${2:Component} />\\} />$0"],
		"description": "React Router `<Route>`\n"
	},
	"React Router useLocation": {
		"prefix": ["rul"],
		"body": [
			"let location = useLocation()",
			"useEffect(() => {",
			"\thandleNavActionStyle(location)",
			"}, [location])"
		],
		"description": "The `useLocation` hook returns the current `location` object. This can be useful if you'd like to perform some side effect whenever the current location changes."
	},
	"React Router useNavigate": {
		"prefix": ["run"],
		"body": ["let navigate = useNavigate()", "navigate(${1:path}, { replace: true })"],
		"description": "import React Router `useNavigate` hook. \n `useNavigate` hook instead of `useHistory`\n"
	},
	"React Router useParams": {
		"prefix": ["rup"],
		"body": ["const {${1:id}} = useParams()"],
		"description": "React Router `useParams` hook.\n"
	},
	"React Router usePrompt": {
		"prefix": ["rupr"],
		"body": ["usePrompt(${1:'Are you sure you want to leave?'}, ${2:formData != null})$0}"],
		"description": "React Router `usePrompt` hook.\n"
	},
	"React Router useRoutes": {
		"prefix": ["rur"],
		"body": [
			"let ${0:routes} = useRoutes([",
			"  {",
			"    path: ${1:'/'},",
			"    element: ${2:<Dashboard />},",
			"    children: [",
			"      { path: ${3:'messages'}, element: ${4:<DashboardMessages />} },",
			"      { path: ${5:'tasks'}, element: ${6:<DashboardTasks />} },",
			"    ],",
			"  },",
			"  { path: ${7:'team'}, element: ${8:<AboutPage />} },",
			"])",
			"",
			"return ${0:routes}"
		],
		"description": "React Router `useRoutes` hook.\n"
	},
	"React Router useSearchParams": {
		"prefix": ["rusp"],
		"body": [
			"let [searchParams, setSearchParams] = useSearchParams()",
			"",
			"function handleSubmit(event) {",
			"\tevent.preventDefault()",
			"\tlet params = serializeFormQuery(event.target)",
			"\tsetSearchParams(params)",
			"}"
		],
		"description": "React Router `useSearchParams` hook.\n"
	}
}
